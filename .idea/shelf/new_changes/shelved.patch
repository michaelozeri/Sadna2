Index: utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\n\r\nSTRAND_PLUS = \"plus\"\r\nSTRAND_MINUS = \"minus\"\r\nSTARTING_STRAND = STRAND_PLUS\r\n\r\n\r\ndef split_dictionary_to_strands(old_dict):\r\n    strand_plus = dict.fromkeys(old_dict.keys(), {})\r\n    strand_minus = dict.fromkeys(old_dict.keys(), {})\r\n    dic_finals = dict.fromkeys({\"strand_plus\", \"strand_minus\"})\r\n    dic_finals[\"strand_plus\"] = strand_plus\r\n    dic_finals[\"strand_minus\"] = strand_minus\r\n    for person_key in old_dict:\r\n        person_data = old_dict[person_key]\r\n        person_data_plus = strand_plus[person_key]\r\n        person_data_minus = strand_minus[person_key]\r\n        for chromosome_key in person_data:\r\n            chromosome_data = person_data[chromosome_key]\r\n            split_object = split_chromosome_data(STARTING_STRAND, chromosome_data[\"Sequence\"],\r\n                                                 chromosome_data[\"StrandInfo\"])\r\n            person_data_plus[chromosome_key] = split_object[\"plus\"]\r\n            person_data_minus[chromosome_key] = split_object[\"minus\"]\r\n    return dic_finals\r\n\r\n\r\ndef split_chromosome_data(start_strand, strand_sequence, strand_info):\r\n    split_object = dict.fromkeys({STRAND_PLUS, STRAND_MINUS}, [])\r\n    current_strand = start_strand\r\n    for i in range(len(strand_sequence)):\r\n        if strand_info[i] == 0:\r\n            current_strand = switch_strand(current_strand)\r\n        split_object[current_strand].append(strand_sequence[i])\r\n    return split_object\r\n\r\n\r\ndef switch_strand(current_strand):\r\n    if current_strand == STRAND_PLUS:\r\n        return STRAND_MINUS\r\n    else:\r\n        return STRAND_PLUS\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- utils.py	(revision 3786aac8a13dc0e145fc4746a615588e4218b93d)
+++ utils.py	(date 1553358592999)
@@ -1,3 +1,5 @@
+import json
+import time
 import numpy as np
 
 STRAND_PLUS = "plus"
@@ -6,26 +8,30 @@
 
 
 def split_dictionary_to_strands(old_dict):
-    strand_plus = dict.fromkeys(old_dict.keys(), {})
-    strand_minus = dict.fromkeys(old_dict.keys(), {})
-    dic_finals = dict.fromkeys({"strand_plus", "strand_minus"})
-    dic_finals["strand_plus"] = strand_plus
-    dic_finals["strand_minus"] = strand_minus
+    strand_dict_plus = {}
+    strand_dict_minus = {}
+    dic_finals = {"strand_dict_plus": strand_dict_plus, "strand_dict_minus": strand_dict_minus}
     for person_key in old_dict:
         person_data = old_dict[person_key]
-        person_data_plus = strand_plus[person_key]
-        person_data_minus = strand_minus[person_key]
+        person_data_plus = {}
+        person_data_minus = {}
         for chromosome_key in person_data:
+            if chromosome_key == 'Y':
+                continue
             chromosome_data = person_data[chromosome_key]
+            # get starting strand from chromosome here instead of STARTING_STRAND
             split_object = split_chromosome_data(STARTING_STRAND, chromosome_data["Sequence"],
                                                  chromosome_data["StrandInfo"])
-            person_data_plus[chromosome_key] = split_object["plus"]
-            person_data_minus[chromosome_key] = split_object["minus"]
+            person_data_plus[chromosome_key] = split_object[STRAND_PLUS]
+            person_data_minus[chromosome_key] = split_object[STRAND_MINUS]
+        strand_dict_plus[person_key] = person_data_plus
+        strand_dict_minus[person_key] = person_data_minus
+    assert len(dic_finals["strand_dict_minus"]) == len(dic_finals["strand_dict_plus"])
     return dic_finals
 
 
 def split_chromosome_data(start_strand, strand_sequence, strand_info):
-    split_object = dict.fromkeys({STRAND_PLUS, STRAND_MINUS}, [])
+    split_object = {STRAND_PLUS: [], STRAND_MINUS: []}
     current_strand = start_strand
     for i in range(len(strand_sequence)):
         if strand_info[i] == 0:
@@ -40,3 +46,11 @@
     else:
         return STRAND_PLUS
 
+
+with open('data/BRCA-strand-info.json') as f1:
+    dic_data = json.load(f1)
+
+start = time.time()
+answer = split_dictionary_to_strands(dic_data)
+end = time.time()
+print("execution time is: " + str(end - start) + " Seconds, " + str((end - start) / 60) + " Minutes.")
